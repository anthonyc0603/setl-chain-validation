buildscript {
    repositories {
        maven { url "http://si-nexus01.dev.setl.io:8081/repository/maven-public/" }
        mavenLocal()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
        classpath 'com.palantir.gradle.docker:gradle-docker:0.22.1'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.14.0"
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'findbugs'
apply plugin: "org.sonarqube"
apply plugin: 'com.palantir.docker'

sourceCompatibility = 11

// Docker
docker {
    dockerfile file('docker/Dockerfile')

    copySpec.with {
        from('pychain-cmdtools/build/libs') {
            include 'pychain-cmdtools-all-1.0-SNAPSHOT.jar'
            into 'libs'
        }

        from('pychain-node-validation-dev/build/libs') {
            include 'pychain-node-validation-dev-1.0-SNAPSHOT.jar'
            into 'libs'
        }

        from('pychain-node-wallet/build/libs') {
            include 'pychain-node-wallet-1.0-SNAPSHOT.jar'
            into 'libs'
        }

        from('native') {
            include 'libed25519-donna.so'
            into 'libs'
        }
    }

    network 'setl-network'
}

task('dockerBuildNodeValidation') {
    doFirst {
        docker.setTarget('v-node')
        docker.name 'dreg.ad.setl.io/setl/node-validation:1.0-SNAPSHOT'
    }
}.finalizedBy('docker')

task('dockerBuildNodeWallet') {
    doFirst {
        docker.setTarget('w-node')
        docker.name 'dreg.ad.setl.io/setl/node-wallet:1.0-SNAPSHOT'
    }
}.finalizedBy('docker')


//property "sonar.host.url", "http://si-jenkins01.dev.setl.io:8081"

//Uncomment for sonarqube



dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//PLEASE DO NOT ADD FURTHER REPOSITORIES HERE - ADD TO NEXUS
//Repositories
repositories {
    //Allow local repository for snapshot builds
    if (version.endsWith("SNAPSHOT")) {
        mavenLocal()
    }
    maven { url "http://si-nexus01.dev.setl.io:8081/repository/maven-public/" }
}

configure(allprojects) { project ->
    ext.slf4jVersion = "1.7.25"
//    ext.log4j2Version = "2.8.2" - not compatible with springboot
    ext.log4j2Version = "2.11.1"
    ext.setlPasswdCommon = '1.2'
    ext.springBootVersion = "2.0.5.RELEASE"
    ext.springVersion = '5.0.9.RELEASE'
    ext.sqlliteVersion = "3.21.0"
    ext.nettyVersion = "4.1.6.Final"
    ext.kafkaVersion = '2.7.0'
    ext.i2pEd25519Version = "0.2.0"
    ext.jsonSimpleSetlVersion = "1.2.3"
    ext.h2Version = '1.4.193'
    ext.utilPyConfigVersion = '1.0.2'
    ext.messagePackVersion = '1.0.5'
    ext.utilMsgpackVersion = '1.0.3'
    ext.rocksVersion = '5.2.1'
    ext.nettyPychainCodecVersion = '1.0'
    ext.setlBosVersion = '1.5'
    ext.bouncyCastleVersion = '1.68'
    ext.mysqlVersion = '5.1.47'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: "info.solidsoft.pitest"
    apply plugin: "com.github.hierynomus.license"
    group 'io.setl.bc'
//    version '1.0-RC8'
    version '1.0-SNAPSHOT'

    //Repositories
    repositories {
        //Allow local repository for snapshot builds
        if (version.endsWith("SNAPSHOT")) {
            mavenLocal()
        }
        maven { url "http://si-nexus01.dev.setl.io:8081/repository/maven-public/" }
    }

    configurations {

        all*.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'

        all*.resolutionStrategy {
            force group : 'org.apache.logging.log4j' , name: 'log4j-api', version: log4j2Version
            force group : 'org.apache.logging.log4j' , name: 'log4j-core', version: log4j2Version
            force group : 'org.apache.logging.log4j' , name: 'log4j-slf4j-impl', version: log4j2Version
            force group : 'org.slf4j' , name: 'slf4j-api', version: slf4jVersion
            force group : 'org.springframework' , name: 'spring-core', version: springVersion
            force group : 'org.springframework' , name: 'spring-beans', version: springVersion
            force group : 'org.springframework' , name: 'spring-context', version: springVersion
            force group : 'org.springframework' , name: 'spring-aop', version: springVersion


        }

    }

    dependencies {

        findbugs 'com.google.code.findbugs:findbugs:3.0.1'
        findbugs configurations.findbugsPlugins.dependencies
        findbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.4.6'

        compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.8.47'
        testRuntimeOnly group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4j2Version
        testRuntimeOnly group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4j2Version
        testRuntimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4j2Version
    }

    licenseMain.enabled = false
    licenseTest.enabled = false

    //Testing
    test {
        jvmArgs '-Djava.util.concurrent.ForkJoinPool.common.parallelism=4'
        exclude '**/*IT.class'
        exclude '**/*PT.class'
        //Only run dbtestsuite when property set
        if (!project.hasProperty('dbtestsuite'))
            exclude '**/DBTestSuite.class'

    }

    //Add native library for tests.
    tasks.withType(Test) {
        systemProperty "java.library.path", "${project.projectDir}/../native"
    }

    //Collect jars for installation scripts
    task install(type: Copy) {
        dependsOn build
        from configurations.runtime
        from jar
        into "${project.projectDir}/build/install-lib"
    }

    //Check that release build has no snapshot
    task checkSnapshot() {
        doLast {
            if (version.endsWith("SNAPSHOT"))
                return;

            def snap = false;
            project.configurations.runtime.each {
                if (it.toString().contains("SNAPSHOT")) {
                    snap = true;
                    println(("Release build contains snapshot dependencies: " + it));
                }
            }

            if (snap)
                throw new Exception("Release build contains snapshot dependencies");

        }
    }

    jar.dependsOn checkSnapshot

    task integrationTests(group: 'verification', type: Test) {
        include '**/*IT.class'
    }

    task performanceTests(group: 'verification', type: Test) {
        include '**/*PT.class'
    }

    //Checkstyle
    checkstyle {
        toolVersion = "7.8.2"
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    //FindBugs
    tasks.withType(FindBugs) {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }
/*
    findbugs {
        toolVersion = "3.0.1"
        sourceSets = [sourceSets.main]
        ignoreFailures = true
   //     includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
   //     excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
   //     excludeBugsFilter = file("$rootProject.projectDir/config/findbugs/excludeBugsFilter.xml")
    }
*/

    //copied from https://github.com/find-sec-bugs/find-sec-bugs/wiki/Gradle-configuration
    //FindSecurityBugs

    task findSecurityBugs(type: FindBugs) {
        classes = fileTree(project.rootDir.absolutePath).include("**/*.class");
        source = fileTree(project.rootDir.absolutePath).include("**/*.java");
        classpath = files()
        pluginClasspath = project.configurations.findbugsPlugins

        findbugs {
            toolVersion = "3.0.1"
            sourceSets = [sourceSets.main]
            ignoreFailures = true
            reportsDir = file("$project.buildDir/findbugsReports")
            //    effort = "max"
            //    reportLevel = "high"
            //   includeFilter = file("$rootProject.projectDir/config/findsecuritybugs/findbugs-security-include.xml")
            //  excludeFilter = file("$rootProject.projectDir/config/findsecuritybugs/findbugs-security-exclude.xml")
        }
    }

    pitest {
        targetClasses = ["io.*"] //by default "${project.group}.*"
        pitestVersion = "1.1.11" //not needed when a default PIT version should be used
        timestampedReports = false
        threads = 4
        outputFormats = ['XML', 'HTML']
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                credentials {
                    username = 'publisher'
                    password = 'publish'
                }
                url 'http://si-nexus01.dev.setl.io:8081/repository/setl-libs'
//                url 'http://si-nexus01.dev.setl.io:8081/repository/setl-snaps'
            }
        }
    }

    sonarqube {
        properties{
            property 'sonar.coverage.exclusions', "**/io/setl/bc/pychain/cmdline/*, **/io/setl/bc/pychain/state/DbgCompareState"
        }
    }

}
